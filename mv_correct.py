


import psycopg2
import datetime
# from dateutil.relativedelta import relativedelta
from dateutil.relativedelta import *

# from config import config

def connect():
    """ Connect to the PostgreSQL database server """
    conn = None
    try:
        # import pdb; pdb.set_trace()
        # connect to the PostgreSQL server
        conn = psycopg2.connect(host="localhost",database="oxygen6", user="admin", password="tms@123")
        print('Connecting to the PostgreSQL database...')
        # conn = psycopg2.connect(**params)

        # create a cursor
        cur = conn.cursor()
        conn.autocommit = True
 # execute a statement
        print('PostgreSQL database version:')
        cur.execute('SELECT version()')
        #import pdb;pdb.set_trace()
        # display the PostgreSQL database server version
        db_version = cur.fetchone()
        print(db_version)
        # cur.execute("DROP MATERIALIZED VIEW mv_sales_data_3month_back");
        # cur.execute("DROP MATERIALIZED VIEW mv_sales_data");
        # cur.execute("DROP MATERIALIZED VIEW mv_enquiry_data_3month_back");
        # cur.execute("DROP MATERIALIZED VIEW mv_enquiry_data");
        cur.execute("SELECT * from pg_matviews where matviewname = 'mv_sales_data_3month_back'");
        #exit(0)
        if not bool(cur.rowcount):
            str_sales_mv="CREATE MATERIALIZED VIEW mv_sales_data_3month_back AS (SELECT products.vchr_name as vchr_product_name,products.pk_bint_id as product_id,ROUND(sum(ie.dbl_sup_amount * ie.int_sold)::numeric,2) AS dbl_cost_price,auth_user.id AS user_id,brands.pk_bint_id as brand_id,brands.vchr_name AS vchr_brand,item.vchr_name AS vchr_item, item.pk_bint_id,COALESCE(ROUND(sum(ie.dbl_amount)::numeric-sum(ie.dbl_discount_amount)::numeric-sum(ie.dbl_buy_back_amount)::numeric,2)::BIGINT,0) AS dbl_selling_price,sum(case when vchr_enquiry_status='RETURNED' then (-1*ie.int_sold) else ie.int_sold end) AS int_sold,(auth_user.first_name || ' ' || auth_user.last_name) AS vchr_staff,br.vchr_code as branch_code,br.pk_bint_id AS branch_id,br.vchr_name AS branch_name,hd.pk_bint_id AS territory_id,hd.vchr_name AS territory_name,ie.dat_sale :: DATE as dat_enquiry,enquiry_master.fk_company_id as int_company_id,  case when um.fk_brand_id>0 then 'promoter' else 'not promoter' END AS promoter, case when um.dat_resignation_applied<localtimestamp then 'resigned' else 'not resigned' end AS is_resigned, so.vchr_source_name AS source_name, so.pk_bint_id AS source_id, um.fk_brand_id AS promoter_brand_id, ie.dbl_dealer_price as dbl_dealer_price, ie.dbl_mop_price as dbl_mop, ie.dbl_myg_price as dbl_special_price, ie.dbl_mrp_price as dbl_mrp FROM item_enquiry ie JOIN enquiry_master ON ie.fk_enquiry_master_id = enquiry_master.pk_bint_id AND enquiry_master.chr_doc_status = 'N' JOIN brands ON brands.pk_bint_id = ie.fk_brand_id JOIN products ON products.pk_bint_id = ie.fk_product_id JOIN item ON item.pk_bint_id = ie.fk_item_id JOIN auth_user ON enquiry_master.fk_assigned_id= auth_user.id JOIN userdetails as um on auth_user.id=um.user_ptr_id JOIN branch as br ON br.pk_bint_id= enquiry_master.fk_branch_id JOIN hierarchy_data as hd ON hd.pk_bint_id= br.fk_hierarchy_data_id JOIN source AS so on so.pk_bint_id=enquiry_master.fk_source_id WHERE  ie.vchr_enquiry_status in ('INVOICED','RETURNED') AND enquiry_master.chr_doc_status = 'N' and products.vchr_name!='SMART CHOICE' GROUP BY products.vchr_name, dbl_mrp,dbl_special_price,ie.dbl_mop_price, auth_user.id, item.pk_bint_id,int_company_id, br.pk_bint_id,br.vchr_name,hd.pk_bint_id,ie.dbl_mop_price,hd.vchr_name,um.fk_brand_id, um.dat_resignation_applied, so.vchr_source_name,ie.dbl_mrp_price,brands.pk_bint_id,products.pk_bint_id,br.vchr_code,so.pk_bint_id,ie.int_type,ie.dat_sale::DATE,ie.dbl_dealer_price) WITH NO DATA;"
            dat_3_months_back=datetime.datetime.now()+relativedelta(months=-3)
            str_sales_mv=str_sales_mv.format(dat_3_months_back.strftime("%Y-%m-%d"))
            cur.execute(str_sales_mv);
            cur.execute("REFRESH MATERIALIZED VIEW mv_sales_data_3month_back");
        cur.execute("SELECT * from pg_matviews where matviewname = 'mv_sales_data'");

        if not bool(cur.rowcount):
            str_sales_mv="CREATE MATERIALIZED VIEW mv_sales_data AS (SELECT products.vchr_name as vchr_product_name,products.pk_bint_id as product_id,ROUND(sum(ie.dbl_sup_amount * ie.int_sold)::numeric,2) AS dbl_cost_price,auth_user.id AS user_id,brands.pk_bint_id as brand_id,brands.vchr_name AS vchr_brand,item.vchr_name AS vchr_item, item.pk_bint_id,COALESCE(ROUND(sum(ie.dbl_amount)::numeric-sum(ie.dbl_discount_amount)::numeric-sum(ie.dbl_buy_back_amount)::numeric,2)::BIGINT,0) AS dbl_selling_price,sum(case when vchr_enquiry_status='RETURNED' then (-1*ie.int_sold) else ie.int_sold end) AS int_sold,(auth_user.first_name || ' ' || auth_user.last_name) AS vchr_staff,br.vchr_code as branch_code,br.pk_bint_id AS branch_id,br.vchr_name AS branch_name,hd.pk_bint_id AS territory_id,hd.vchr_name AS territory_name,ie.dat_sale :: DATE as dat_enquiry,enquiry_master.fk_company_id as int_company_id,  case when um.fk_brand_id>0 then 'promoter' else 'not promoter' END AS promoter, case when um.dat_resignation_applied<localtimestamp then 'resigned' else 'not resigned' end AS is_resigned, so.vchr_source_name AS source_name, so.pk_bint_id AS source_id, um.fk_brand_id AS promoter_brand_id, ie.dbl_dealer_price as dbl_dealer_price, ie.dbl_mop_price as dbl_mop, ie.dbl_myg_price as dbl_special_price, ie.dbl_mrp_price as dbl_mrp FROM item_enquiry ie JOIN enquiry_master ON ie.fk_enquiry_master_id = enquiry_master.pk_bint_id AND enquiry_master.chr_doc_status = 'N' JOIN brands ON brands.pk_bint_id = ie.fk_brand_id JOIN products ON products.pk_bint_id = ie.fk_product_id JOIN item ON item.pk_bint_id = ie.fk_item_id JOIN auth_user ON enquiry_master.fk_assigned_id= auth_user.id JOIN userdetails as um on auth_user.id=um.user_ptr_id JOIN branch as br ON br.pk_bint_id= enquiry_master.fk_branch_id JOIN hierarchy_data as hd ON hd.pk_bint_id= br.fk_hierarchy_data_id JOIN source AS so on so.pk_bint_id=enquiry_master.fk_source_id WHERE  ie.vchr_enquiry_status in ('INVOICED','RETURNED') AND enquiry_master.chr_doc_status = 'N' and products.vchr_name!='SMART CHOICE' GROUP BY products.vchr_name, dbl_mrp,dbl_special_price,ie.dbl_mop_price, auth_user.id, item.pk_bint_id,int_company_id, br.pk_bint_id,br.vchr_name,hd.pk_bint_id,ie.dbl_mop_price,hd.vchr_name,um.fk_brand_id, um.dat_resignation_applied, so.vchr_source_name,ie.dbl_mrp_price,brands.pk_bint_id,products.pk_bint_id,br.vchr_code,so.pk_bint_id,ie.int_type,ie.dat_sale::DATE,ie.dbl_dealer_price) WITH NO DATA;"
            dat_3_months_back=datetime.datetime.now()+relativedelta(months=-3)
            str_sales_mv=str_sales_mv.format(dat_3_months_back.strftime("%Y-%m-%d"),datetime.datetime.now().strftime("%Y-%m-%d"))
            cur.execute(str_sales_mv);
            cur.execute("REFRESH MATERIALIZED VIEW mv_sales_data");
        cur.execute("SELECT * from pg_matviews where matviewname = 'mv_enquiry_data_3month_back'");
        if not bool(cur.rowcount):
            str_enquiry_mv="CREATE MATERIALIZED VIEW mv_enquiry_data_3month_back AS (SELECT products.vchr_name as vchr_product_name,products.pk_bint_id as product_id,ROUND(sum(ie.dbl_sup_amount * ie.int_sold)::numeric,2) AS total_cost,auth_user.id AS user_id,brands.pk_bint_id as brand_id,brands.vchr_name AS vchr_brand_name,item.vchr_name AS vchr_item_name, case when ie.vchr_enquiry_status in ('RETURNED','IMAGE PENDING') then 'INVOICED' else ie.vchr_enquiry_status end AS vchr_enquiry_status,COALESCE(ROUND(sum(ie.dbl_amount)::numeric-sum(ie.dbl_discount_amount)::numeric-sum(ie.dbl_buy_back_amount)::numeric,2)::BIGINT,0) AS total_amount,sum(case when vchr_enquiry_status='RETURNED' then (-1*ie.int_sold) else ie.int_sold end) AS int_sold,sum(case when vchr_enquiry_status ='RETURNED' then (-1*ie.int_sold) when vchr_enquiry_status in ('INVOICED','IMAGE PENDING') then int_sold else ie.int_quantity end) AS int_quantity, auth_user.last_name AS staff_last_name, auth_user.first_name AS staff_first_name,customer_details.pk_bint_id AS customer_id,customer_details.vchr_name AS customer_first_name,customer_details.int_mobile AS customer_mobile,item.pk_bint_id,br.vchr_code as branch_code,br.pk_bint_id AS branch_id,br.vchr_name AS branch_name,hd.pk_bint_id AS hierarchy_id,hd.vchr_name AS hierarchy_name,case when vchr_enquiry_status in ('INVOICED','RETURNED','IMAGE PENDING') then ie.dat_sale::DATE else enquiry_master.dat_created_at :: DATE end as dat_enquiry,enquiry_master.fk_company_id as int_company_id, case when um.fk_brand_id>0 then 'promoter' else 'not promoter' END AS promoter,case when um.dat_resignation_applied<localtimestamp then 'resigned' else 'not resigned' end AS is_resigned,so.vchr_source_name AS source_name,so.pk_bint_id AS source_id,um.fk_brand_id AS promoter_brand_id,ie.int_type FROM item_enquiry ie JOIN enquiry_master ON ie.fk_enquiry_master_id = enquiry_master.pk_bint_id AND enquiry_master.chr_doc_status = 'N' JOIN brands ON brands.pk_bint_id = ie.fk_brand_id JOIN products ON products.pk_bint_id = ie.fk_product_id JOIN item ON item.pk_bint_id = ie.fk_item_id JOIN branch ON branch.pk_bint_id = enquiry_master.fk_branch_id JOIN customer_details ON enquiry_master.fk_customer_id = customer_details.pk_bint_id JOIN auth_user ON enquiry_master.fk_assigned_id= auth_user.id JOIN userdetails as um on auth_user.id=um.user_ptr_id JOIN branch as br ON br.pk_bint_id= enquiry_master.fk_branch_id JOIN hierarchy_data as hd ON hd.pk_bint_id= br.fk_hierarchy_data_id JOIN source AS so on so.pk_bint_id=enquiry_master.fk_source_id WHERE ((vchr_enquiry_status not in ('INVOICED','RETURNED','IMAGE PENDING') ) OR (vchr_enquiry_status in ('INVOICED','RETURNED','IMAGE PENDING') )) AND enquiry_master.chr_doc_status = 'N' and products.vchr_name!='SMART CHOICE' GROUP BY products.vchr_name, brands.vchr_name,item.vchr_name,vchr_enquiry_status,auth_user.id,item.pk_bint_id,dat_enquiry,int_company_id,br.pk_bint_id,br.vchr_name,hd.pk_bint_id,hd.vchr_name,customer_details.pk_bint_id,customer_details.vchr_name,um.fk_brand_id,um.dat_resignation_applied,so.vchr_source_name,customer_details.int_mobile,brands.pk_bint_id,products.pk_bint_id,br.vchr_code,so.pk_bint_id,ie.int_type) WITH NO DATA;"

            dat_3_months_back=datetime.datetime.now()+relativedelta(months=-3)
            str_enquiry_mv=str_enquiry_mv.format(dat_3_months_back.strftime("%Y-%m-%d"))
            cur.execute(str_enquiry_mv);
            cur.execute("REFRESH MATERIALIZED VIEW mv_enquiry_data_3month_back");
        cur.execute("SELECT * from pg_matviews where matviewname = 'mv_enquiry_data'");
        if not bool(cur.rowcount):
            #import pdb;pdb.set_trace()
            str_enquiry_mv="CREATE MATERIALIZED VIEW mv_enquiry_data AS (SELECT products.vchr_name as vchr_product_name,products.pk_bint_id as product_id,ROUND(sum(ie.dbl_sup_amount * ie.int_sold)::numeric,2) AS total_cost,auth_user.id AS user_id,brands.pk_bint_id as brand_id,brands.vchr_name AS vchr_brand_name,item.vchr_name AS vchr_item_name, case when ie.vchr_enquiry_status in ('RETURNED','IMAGE PENDING') then 'INVOICED' else ie.vchr_enquiry_status end AS vchr_enquiry_status,COALESCE(ROUND(sum(ie.dbl_amount)::numeric-sum(ie.dbl_discount_amount)::numeric-sum(ie.dbl_buy_back_amount)::numeric,2)::BIGINT,0) AS total_amount,sum(case when vchr_enquiry_status='RETURNED' then (-1*ie.int_sold) else ie.int_sold end) AS int_sold,sum(case when vchr_enquiry_status ='RETURNED' then (-1*ie.int_sold) when vchr_enquiry_status in ('INVOICED','IMAGE PENDING') then int_sold else ie.int_quantity end) AS int_quantity, auth_user.last_name AS staff_last_name, auth_user.first_name AS staff_first_name,customer_details.pk_bint_id AS customer_id,customer_details.vchr_name AS customer_first_name,customer_details.int_mobile AS customer_mobile,item.pk_bint_id,br.vchr_code as branch_code,br.pk_bint_id AS branch_id,br.vchr_name AS branch_name,hd.pk_bint_id AS hierarchy_id,hd.vchr_name AS hierarchy_name,case when vchr_enquiry_status in ('INVOICED','RETURNED','IMAGE PENDING') then ie.dat_sale::DATE else enquiry_master.dat_created_at :: DATE end as dat_enquiry,enquiry_master.fk_company_id as int_company_id, case when um.fk_brand_id>0 then 'promoter' else 'not promoter' END AS promoter,case when um.dat_resignation_applied<localtimestamp then 'resigned' else 'not resigned' end AS is_resigned,so.vchr_source_name AS source_name,so.pk_bint_id AS source_id,um.fk_brand_id AS promoter_brand_id,ie.int_type FROM item_enquiry ie JOIN enquiry_master ON ie.fk_enquiry_master_id = enquiry_master.pk_bint_id AND enquiry_master.chr_doc_status = 'N' JOIN brands ON brands.pk_bint_id = ie.fk_brand_id JOIN products ON products.pk_bint_id = ie.fk_product_id JOIN item ON item.pk_bint_id = ie.fk_item_id JOIN branch ON branch.pk_bint_id = enquiry_master.fk_branch_id JOIN customer_details ON enquiry_master.fk_customer_id = customer_details.pk_bint_id JOIN auth_user ON enquiry_master.fk_assigned_id= auth_user.id JOIN userdetails as um on auth_user.id=um.user_ptr_id JOIN branch as br ON br.pk_bint_id= enquiry_master.fk_branch_id JOIN hierarchy_data as hd ON hd.pk_bint_id= br.fk_hierarchy_data_id JOIN source AS so on so.pk_bint_id=enquiry_master.fk_source_id WHERE ((vchr_enquiry_status not in ('INVOICED','RETURNED','IMAGE PENDING') ) OR (vchr_enquiry_status in ('INVOICED','RETURNED','IMAGE PENDING') )) AND enquiry_master.chr_doc_status = 'N' and products.vchr_name!='SMART CHOICE' GROUP BY products.vchr_name, brands.vchr_name,item.vchr_name,vchr_enquiry_status,auth_user.id,item.pk_bint_id,dat_enquiry,int_company_id,br.pk_bint_id,br.vchr_name,hd.pk_bint_id,hd.vchr_name,customer_details.pk_bint_id,customer_details.vchr_name,um.fk_brand_id,um.dat_resignation_applied,so.vchr_source_name,customer_details.int_mobile,brands.pk_bint_id,products.pk_bint_id,br.vchr_code,so.pk_bint_id,ie.int_type) WITH NO DATA;"

            dat_3_months_back=datetime.datetime.now()+relativedelta(months=-3)
            str_enquiry_mv=str_enquiry_mv.format(dat_3_months_back.strftime("%Y-%m-%d"),datetime.datetime.now().strftime("%Y-%m-%d"))
            cur.execute(str_enquiry_mv);
            cur.execute("REFRESH MATERIALIZED VIEW mv_enquiry_data");
        cur.execute("select max(dat_created_at) from enquiry_master")
        dat_enquirymaster_max=cur.fetchone()[0]
        dat_last_check=datetime.datetime.now()-datetime.timedelta(minutes = 5)
        print(dat_enquirymaster_max)
        if dat_enquirymaster_max==None:
            pass
        elif dat_last_check < dat_enquirymaster_max:
            cur.execute("REFRESH MATERIALIZED VIEW mv_enquiry_data");
        str_date=dat_last_check.strftime('%Y-%m-%d')
        cur.execute("select distinct(ie.vchr_enquiry_status) from enquiry_master as em join item_enquiry as ie on em.pk_bint_id=ie.fk_enquiry_master_id where em.dat_created_at>'"+str_date+"'");
        lst_status=cur.fetchall()
        lst_status_data = [sub[0] for sub in lst_status]
        if lst_status_data.count("INVOICED")>0:
            cur.execute("REFRESH MATERIALIZED VIEW mv_sales_data");
        now = datetime.datetime.now()
        today_12_00_am = now.replace(hour=0, minute=0, second=0, microsecond=0)
        today_12_04_am = now.replace(hour=0, minute=4, second=0, microsecond=0)
        if today_12_00_am <= now <= today_12_04_am:
            dat_3_months_back=datetime.datetime.now()+relativedelta(months=-3)
            cur.execute("DROP MATERIALIZED VIEW mv_sales_data_3month_back");
            cur.execute("DROP MATERIALIZED VIEW mv_sales_data");
            cur.execute("DROP MATERIALIZED VIEW mv_enquiry_data_3month_back");
            cur.execute("DROP MATERIALIZED VIEW mv_enquiry_data");
            str_sales_mv="CREATE MATERIALIZED VIEW mv_sales_data_3month_back AS (SELECT products.vchr_name as vchr_product_name,products.pk_bint_id as product_id,ROUND(sum(ie.dbl_sup_amount * ie.int_sold)::numeric,2) AS dbl_cost_price,auth_user.id AS user_id,brands.pk_bint_id as brand_id,brands.vchr_name AS vchr_brand,item.vchr_name AS vchr_item, item.pk_bint_id,COALESCE(ROUND(sum(ie.dbl_amount)::numeric-sum(ie.dbl_discount_amount)::numeric-sum(ie.dbl_buy_back_amount)::numeric,2)::BIGINT,0) AS dbl_selling_price,sum(case when vchr_enquiry_status='RETURNED' then (-1*ie.int_sold) else ie.int_sold end) AS int_sold,(auth_user.first_name || ' ' || auth_user.last_name) AS vchr_staff,br.vchr_code as branch_code,br.pk_bint_id AS branch_id,br.vchr_name AS branch_name,hd.pk_bint_id AS territory_id,hd.vchr_name AS territory_name,ie.dat_sale :: DATE as dat_enquiry,enquiry_master.fk_company_id as int_company_id,  case when um.fk_brand_id>0 then 'promoter' else 'not promoter' END AS promoter, case when um.dat_resignation_applied<localtimestamp then 'resigned' else 'not resigned' end AS is_resigned, so.vchr_source_name AS source_name, so.pk_bint_id AS source_id, um.fk_brand_id AS promoter_brand_id, ie.dbl_dealer_price as dbl_dealer_price, ie.dbl_mop_price as dbl_mop, ie.dbl_myg_price as dbl_special_price, ie.dbl_mrp_price as dbl_mrp FROM item_enquiry ie JOIN enquiry_master ON ie.fk_enquiry_master_id = enquiry_master.pk_bint_id AND enquiry_master.chr_doc_status = 'N' JOIN brands ON brands.pk_bint_id = ie.fk_brand_id JOIN products ON products.pk_bint_id = ie.fk_product_id JOIN item ON item.pk_bint_id = ie.fk_item_id JOIN auth_user ON enquiry_master.fk_assigned_id= auth_user.id JOIN userdetails as um on auth_user.id=um.user_ptr_id JOIN branch as br ON br.pk_bint_id= enquiry_master.fk_branch_id JOIN hierarchy_data as hd ON hd.pk_bint_id= br.fk_hierarchy_data_id JOIN source AS so on so.pk_bint_id=enquiry_master.fk_source_id WHERE  ie.vchr_enquiry_status in ('INVOICED','RETURNED') AND enquiry_master.chr_doc_status = 'N' and products.vchr_name!='SMART CHOICE' GROUP BY products.vchr_name, dbl_mrp,dbl_special_price,ie.dbl_mop_price, auth_user.id, item.pk_bint_id,int_company_id, br.pk_bint_id,br.vchr_name,hd.pk_bint_id,ie.dbl_mop_price,hd.vchr_name,um.fk_brand_id, um.dat_resignation_applied, so.vchr_source_name,ie.dbl_mrp_price,brands.pk_bint_id,products.pk_bint_id,br.vchr_code,so.pk_bint_id,ie.int_type,ie.dat_sale::DATE,ie.dbl_dealer_price) WITH NO DATA;"
            # dat_3_months_back=datetime.datetime.now()+relativedelta(months=-3)
            str_sales_mv=str_sales_mv.format(dat_3_months_back.strftime("%Y-%m-%d"))
            cur.execute(str_sales_mv);
            cur.execute("REFRESH MATERIALIZED VIEW mv_sales_data_3month_back");
            str_sales_mv="CREATE MATERIALIZED VIEW mv_sales_data AS (SELECT products.vchr_name as vchr_product_name,products.pk_bint_id as product_id,ROUND(sum(ie.dbl_sup_amount * ie.int_sold)::numeric,2) AS dbl_cost_price,auth_user.id AS user_id,brands.pk_bint_id as brand_id,brands.vchr_name AS vchr_brand,item.vchr_name AS vchr_item, item.pk_bint_id,COALESCE(ROUND(sum(ie.dbl_amount)::numeric-sum(ie.dbl_discount_amount)::numeric-sum(ie.dbl_buy_back_amount)::numeric,2)::BIGINT,0) AS dbl_selling_price,sum(case when vchr_enquiry_status='RETURNED' then (-1*ie.int_sold) else ie.int_sold end) AS int_sold,(auth_user.first_name || ' ' || auth_user.last_name) AS vchr_staff,br.vchr_code as branch_code,br.pk_bint_id AS branch_id,br.vchr_name AS branch_name,hd.pk_bint_id AS territory_id,hd.vchr_name AS territory_name,ie.dat_sale :: DATE as dat_enquiry,enquiry_master.fk_company_id as int_company_id,  case when um.fk_brand_id>0 then 'promoter' else 'not promoter' END AS promoter, case when um.dat_resignation_applied<localtimestamp then 'resigned' else 'not resigned' end AS is_resigned, so.vchr_source_name AS source_name, so.pk_bint_id AS source_id, um.fk_brand_id AS promoter_brand_id, ie.dbl_dealer_price as dbl_dealer_price, ie.dbl_mop_price as dbl_mop, ie.dbl_myg_price as dbl_special_price, ie.dbl_mrp_price as dbl_mrp FROM item_enquiry ie JOIN enquiry_master ON ie.fk_enquiry_master_id = enquiry_master.pk_bint_id AND enquiry_master.chr_doc_status = 'N' JOIN brands ON brands.pk_bint_id = ie.fk_brand_id JOIN products ON products.pk_bint_id = ie.fk_product_id JOIN item ON item.pk_bint_id = ie.fk_item_id JOIN auth_user ON enquiry_master.fk_assigned_id= auth_user.id JOIN userdetails as um on auth_user.id=um.user_ptr_id JOIN branch as br ON br.pk_bint_id= enquiry_master.fk_branch_id JOIN hierarchy_data as hd ON hd.pk_bint_id= br.fk_hierarchy_data_id JOIN source AS so on so.pk_bint_id=enquiry_master.fk_source_id WHERE  ie.vchr_enquiry_status in ('INVOICED','RETURNED') AND enquiry_master.chr_doc_status = 'N' and products.vchr_name!='SMART CHOICE' GROUP BY products.vchr_name, dbl_mrp,dbl_special_price,ie.dbl_mop_price, auth_user.id, item.pk_bint_id,int_company_id, br.pk_bint_id,br.vchr_name,hd.pk_bint_id,ie.dbl_mop_price,hd.vchr_name,um.fk_brand_id, um.dat_resignation_applied, so.vchr_source_name,ie.dbl_mrp_price,brands.pk_bint_id,products.pk_bint_id,br.vchr_code,so.pk_bint_id,ie.int_type,ie.dat_sale::DATE,ie.dbl_dealer_price) WITH NO DATA;"
            # dat_3_months_back=datetime.datetime.now()+relativedelta(months=-3)
            str_sales_mv=str_sales_mv.format(dat_3_months_back.strftime("%Y-%m-%d"),datetime.datetime.now().strftime("%Y-%m-%d"))
            cur.execute(str_sales_mv);
            cur.execute("REFRESH MATERIALIZED VIEW mv_sales_data");
            str_enquiry_mv="CREATE MATERIALIZED VIEW mv_enquiry_data_3month_back AS (SELECT products.vchr_name as vchr_product_name,products.pk_bint_id as product_id,ROUND(sum(ie.dbl_sup_amount * ie.int_sold)::numeric,2) AS total_cost,auth_user.id AS user_id,brands.pk_bint_id as brand_id,brands.vchr_name AS vchr_brand_name,item.vchr_name AS vchr_item_name, case when ie.vchr_enquiry_status in ('RETURNED','IMAGE PENDING') then 'INVOICED' else ie.vchr_enquiry_status end AS vchr_enquiry_status,COALESCE(ROUND(sum(ie.dbl_amount)::numeric-sum(ie.dbl_discount_amount)::numeric-sum(ie.dbl_buy_back_amount)::numeric,2)::BIGINT,0) AS total_amount,sum(case when vchr_enquiry_status='RETURNED' then (-1*ie.int_sold) else ie.int_sold end) AS int_sold,sum(case when vchr_enquiry_status ='RETURNED' then (-1*ie.int_sold) when vchr_enquiry_status in ('INVOICED','IMAGE PENDING') then int_sold else ie.int_quantity end) AS int_quantity, auth_user.last_name AS staff_last_name, auth_user.first_name AS staff_first_name,customer_details.pk_bint_id AS customer_id,customer_details.vchr_name AS customer_first_name,customer_details.int_mobile AS customer_mobile,item.pk_bint_id,br.vchr_code as branch_code,br.pk_bint_id AS branch_id,br.vchr_name AS branch_name,hd.pk_bint_id AS hierarchy_id,hd.vchr_name AS hierarchy_name,case when vchr_enquiry_status in ('INVOICED','RETURNED','IMAGE PENDING') then ie.dat_sale::DATE else enquiry_master.dat_created_at :: DATE end as dat_enquiry,enquiry_master.fk_company_id as int_company_id, case when um.fk_brand_id>0 then 'promoter' else 'not promoter' END AS promoter,case when um.dat_resignation_applied<localtimestamp then 'resigned' else 'not resigned' end AS is_resigned,so.vchr_source_name AS source_name,so.pk_bint_id AS source_id,um.fk_brand_id AS promoter_brand_id,ie.int_type FROM item_enquiry ie JOIN enquiry_master ON ie.fk_enquiry_master_id = enquiry_master.pk_bint_id AND enquiry_master.chr_doc_status = 'N' JOIN brands ON brands.pk_bint_id = ie.fk_brand_id JOIN products ON products.pk_bint_id = ie.fk_product_id JOIN item ON item.pk_bint_id = ie.fk_item_id JOIN branch ON branch.pk_bint_id = enquiry_master.fk_branch_id JOIN customer_details ON enquiry_master.fk_customer_id = customer_details.pk_bint_id JOIN auth_user ON enquiry_master.fk_assigned_id= auth_user.id JOIN userdetails as um on auth_user.id=um.user_ptr_id JOIN branch as br ON br.pk_bint_id= enquiry_master.fk_branch_id JOIN hierarchy_data as hd ON hd.pk_bint_id= br.fk_hierarchy_data_id JOIN source AS so on so.pk_bint_id=enquiry_master.fk_source_id WHERE ((vchr_enquiry_status not in ('INVOICED','RETURNED','IMAGE PENDING') ) OR (vchr_enquiry_status in ('INVOICED','RETURNED','IMAGE PENDING') )) AND enquiry_master.chr_doc_status = 'N' and products.vchr_name!='SMART CHOICE' GROUP BY products.vchr_name, brands.vchr_name,item.vchr_name,vchr_enquiry_status,auth_user.id,item.pk_bint_id,dat_enquiry,int_company_id,br.pk_bint_id,br.vchr_name,hd.pk_bint_id,hd.vchr_name,customer_details.pk_bint_id,customer_details.vchr_name,um.fk_brand_id,um.dat_resignation_applied,so.vchr_source_name,customer_details.int_mobile,brands.pk_bint_id,products.pk_bint_id,br.vchr_code,so.pk_bint_id,ie.int_type) WITH NO DATA;"
            # dat_3_months_back=datetime.datetime.now()+relativedelta(months=-3)
            str_enquiry_mv=str_enquiry_mv.format(dat_3_months_back.strftime("%Y-%m-%d"))
            cur.execute(str_enquiry_mv);
            cur.execute("REFRESH MATERIALIZED VIEW mv_enquiry_data_3month_back");
            str_enquiry_mv="CREATE MATERIALIZED VIEW mv_enquiry_data AS (SELECT products.vchr_name as vchr_product_name,products.pk_bint_id as product_id,ROUND(sum(ie.dbl_sup_amount * ie.int_sold)::numeric,2) AS total_cost,auth_user.id AS user_id,brands.pk_bint_id as brand_id,brands.vchr_name AS vchr_brand_name,item.vchr_name AS vchr_item_name, case when ie.vchr_enquiry_status in ('RETURNED','IMAGE PENDING') then 'INVOICED' else ie.vchr_enquiry_status end AS vchr_enquiry_status,COALESCE(ROUND(sum(ie.dbl_amount)::numeric-sum(ie.dbl_discount_amount)::numeric-sum(ie.dbl_buy_back_amount)::numeric,2)::BIGINT,0) AS total_amount,sum(case when vchr_enquiry_status='RETURNED' then (-1*ie.int_sold) else ie.int_sold end) AS int_sold,sum(case when vchr_enquiry_status ='RETURNED' then (-1*ie.int_sold) when vchr_enquiry_status in ('INVOICED','IMAGE PENDING') then int_sold else ie.int_quantity end) AS int_quantity, auth_user.last_name AS staff_last_name, auth_user.first_name AS staff_first_name,customer_details.pk_bint_id AS customer_id,customer_details.vchr_name AS customer_first_name,customer_details.int_mobile AS customer_mobile,item.pk_bint_id,br.vchr_code as branch_code,br.pk_bint_id AS branch_id,br.vchr_name AS branch_name,hd.pk_bint_id AS hierarchy_id,hd.vchr_name AS hierarchy_name,case when vchr_enquiry_status in ('INVOICED','RETURNED','IMAGE PENDING') then ie.dat_sale::DATE else enquiry_master.dat_created_at :: DATE end as dat_enquiry,enquiry_master.fk_company_id as int_company_id, case when um.fk_brand_id>0 then 'promoter' else 'not promoter' END AS promoter,case when um.dat_resignation_applied<localtimestamp then 'resigned' else 'not resigned' end AS is_resigned,so.vchr_source_name AS source_name,so.pk_bint_id AS source_id,um.fk_brand_id AS promoter_brand_id,ie.int_type FROM item_enquiry ie JOIN enquiry_master ON ie.fk_enquiry_master_id = enquiry_master.pk_bint_id AND enquiry_master.chr_doc_status = 'N' JOIN brands ON brands.pk_bint_id = ie.fk_brand_id JOIN products ON products.pk_bint_id = ie.fk_product_id JOIN item ON item.pk_bint_id = ie.fk_item_id JOIN branch ON branch.pk_bint_id = enquiry_master.fk_branch_id JOIN customer_details ON enquiry_master.fk_customer_id = customer_details.pk_bint_id JOIN auth_user ON enquiry_master.fk_assigned_id= auth_user.id JOIN userdetails as um on auth_user.id=um.user_ptr_id JOIN branch as br ON br.pk_bint_id= enquiry_master.fk_branch_id JOIN hierarchy_data as hd ON hd.pk_bint_id= br.fk_hierarchy_data_id JOIN source AS so on so.pk_bint_id=enquiry_master.fk_source_id WHERE ((vchr_enquiry_status not in ('INVOICED','RETURNED','IMAGE PENDING') ) OR (vchr_enquiry_status in ('INVOICED','RETURNED','IMAGE PENDING') )) AND enquiry_master.chr_doc_status = 'N' and products.vchr_name!='SMART CHOICE' GROUP BY products.vchr_name, brands.vchr_name,item.vchr_name,vchr_enquiry_status,auth_user.id,item.pk_bint_id,dat_enquiry,int_company_id,br.pk_bint_id,br.vchr_name,hd.pk_bint_id,hd.vchr_name,customer_details.pk_bint_id,customer_details.vchr_name,um.fk_brand_id,um.dat_resignation_applied,so.vchr_source_name,customer_details.int_mobile,brands.pk_bint_id,products.pk_bint_id,br.vchr_code,so.pk_bint_id,ie.int_type) WITH NO DATA;"
            dat_3_months_back=datetime.datetime.now()+relativedelta(months=-3)
            str_enquiry_mv=str_enquiry_mv.format(dat_3_months_back.strftime("%Y-%m-%d"),datetime.datetime.now().strftime("%Y-%m-%d"))
            cur.execute(str_enquiry_mv);
            cur.execute("REFRESH MATERIALIZED VIEW mv_enquiry_data");
     # close the communication with the PostgreSQL
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()
            print('Database connection closed.')


if __name__ == '__main__':
    connect()
